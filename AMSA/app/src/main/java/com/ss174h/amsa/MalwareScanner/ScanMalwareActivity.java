package com.ss174h.amsa.MalwareScanner;

import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.AsyncTask;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.util.Pair;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import com.ss174h.amsa.R;
import org.json.JSONException;
import org.json.JSONObject;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;

public class ScanMalwareActivity extends AppCompatActivity {

    private ArrayList<Pair<String,String>> packs;
    private ArrayList<String> packages;

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scan_malware);

        TextView t = findViewById(R.id.page_title);
        t.setText("Malware Report\n");

        Intent intent = getIntent();
        packages = intent.getStringArrayListExtra("array");
        packs = new ArrayList<>();
        int i = 0;

        ApplicationInfo applicationInfo = new ApplicationInfo();
        for(String pack : packages) {
            Toast.makeText(ScanMalwareActivity.this,"Scanning for malware",Toast.LENGTH_LONG).show();
            try {
                applicationInfo = getPackageManager().getApplicationInfo(packages.get(i), 0);
            } catch (PackageManager.NameNotFoundException nnf) {
                Log.e("Error: ","Package name not found!");
            }

            File apk = new File(applicationInfo.sourceDir);
            String[] out = new String[2];

             try {
                MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
                InputStream inputStream = new FileInputStream(apk);

                byte[] buffer = new byte[8192];
                int read;
                try {
                    while ((read = inputStream.read(buffer)) > 0) {
                        messageDigest.update(buffer, 0, read);
                    }
                    byte[] bytes = messageDigest.digest();
                    BigInteger bigInteger = new BigInteger(1, bytes);
                    String output = bigInteger.toString(16);
                    out[0] = output;
                    out[1] = pack;
                    new GetData().execute(out);
                } catch (IOException e) {
                    throw new RuntimeException("Unable to process file for SHA-256");
                } finally {
                    try {
                        inputStream.close();
                    } catch (IOException e) {
                        Log.e("Error: ", "Exception on closing input stream!");
                    }
                }
             } catch (NoSuchAlgorithmException nsa) {
                Log.e("Error: ", "No such algorithm!");
            } catch (FileNotFoundException fnf) {
                Log.e("Error: ", "File not found!");
            }
            i++;
        }
    }

    private class GetData extends AsyncTask<String, Void, Void> {

        @Override
        protected Void doInBackground(String... arg0) {
            String line;
            String positives;
            String responseCode;
            String api = "a4c4c0eac6eef58293c39ee8db121802f586ac520360bd5a24bec8e93cf157c8";
            String address = "https://www.virustotal.com/vtapi/v2/file/report?apikey=" + api + "&resource=" + arg0[0];
            try {
                URL url = new URL(address);
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                connection.setRequestMethod("GET");

                InputStream in = new BufferedInputStream(connection.getInputStream());
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(in));
                StringBuilder sb = new StringBuilder();
                while((line = bufferedReader.readLine()) != null) {
                    sb.append(line).append("\n");
                }
                String response = sb.toString();
                JSONObject jsonObject = new JSONObject(response);
                responseCode = jsonObject.getString("response_code");
                if(!responseCode.equals("0")) {
                    positives = jsonObject.getString("positives");
                    Pair<String,String> info = new Pair<>(positives,arg0[1]);
                    packs.add(info);
                } else {
                    Pair<String,String> info = new Pair<>("-1",arg0[1]);
                    packs.add(info);
                }
            } catch (MalformedURLException e) {
                Log.e("Error", "Malformed URL Exception");
            } catch (IOException io) {
                Log.e("Error: ", "IO Exception");
            } catch (JSONException jso) {
                Log.e("Error: ", "JSON Exception");
            }

            if(packages.size() > 4) {
                try {
                    Thread.sleep(15000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } else {
                try {
                    Thread.sleep(5000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            return null;
        }

        @Override
        protected void onPostExecute(Void result) {
            super.onPostExecute(result);
            ReportAdapter reportAdapter = new ReportAdapter(ScanMalwareActivity.this,packs);
            final ListView listView = (ListView) findViewById(R.id.list_view);
            listView.setAdapter(reportAdapter);
        }
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        finish();
    }
}
